from datainfo import *
import numpy as np









predicted_point = [
    ( 50, 50, 50, 0) # x, y, z coordinates. Do not leave blank. Do not remove trailing '0'
] # add predicted point here. x y and z must be ints










# Initialize 3D points
axis_points_3d = [
    (0, 100, 0),
    (0, -100, 0),
    (100, 0, 0),
    (-100, 0, 0),
    (0, 0, 100),
    (0, 0, -100),
    (0, 0, 0),
] # axis points

points_3d = [
    (-400.253952440982497, -700.016193270774436, -800.771012285447305, 3),
    (-200.668792309244193, 900.839672983601733, 500.61213142308858, 1),
    (200.2070647884217524, 300.035227792040462, 500.308069271281901, 1),
    (800.40943166197534, 700.787194865580815, -600.387559437141974, 1),
    (-700.043534675879237, 600.598416925496871, 300.289612163443784, 2),
    (-700.581331205666015, -800.356830319573303, -200.6327730865915065, 3),
    (700.158576726507399, 100.2374142860320773, -500.457116845438594, 1),
    (600.176444938223201, -800.460439224749293, -500.617697590139219, 4),
    (000.37473180405346846, -300.4705200320402647, 100.6884895863581643, 3),
    (-700.989661453537952, 800.63504923103584, -800.443497507034647, 2),
    (300.9299288660635287, 700.334729158372506, 0.30738373985777984, 1),
    (-400.471306481396009, 500.849901347065314, -300.5801707561339513, 2),
    (500.034443300783755, -600.213692704796305, -700.558679063316319, 4),
    (-00.05345842086558771, 300.4363510918374995, -300.2655903412056935, 3),
    (-10.4440148109704702, 0.043036340236328496, 20.4169860351868256, 2),
    (10.5343281341119293, 800.973429157105049, -90.854580524050348, 1),
    (00.6650833654613421, -300.794617533077954, 10.8943416222693992, 3),
    (40.762074227684407, 000.4885402887030682, -50.464284685425332, 1),
    (20.419780262084986, 100.4763720444384584, 700.352102842877793, 1),
    (-10.5862318414475048, -80.570636110073067, 500.929198891189906, 3),
    (-70.427888331736787, -70.000422548764792, -200.848934704233722, 3),
    (-00.5937784369835967, 70.662070393301404, -900.960813294745932, 1),
    (-20.446065470406723, -40.369741013470724, 200.2058283101480793, 3),
    (-60.469668597631236, 80.054351196158213, -300.564576048621875, 2),
    (000.5038013682394812, 30.2536004564651357, -700.280865105622, 4),
    (200.7048102422140324, 90.011246798896424, 000.9169896235272073, 1),
    (800.056764837769556, 900.161827302155857, -700.612068270823231, 1),
    (200.9332564197912927, 50.614345036487419, 300.242195191196725, 1),
    (800.512609544848162, 800.125436204613152, -900.08334573152344, 1),
    (000.2720666857743443, 000.6365663732379975, 200.6462211348664844, 1),
    (-500.828897097334228, -001.8131042979152223, -100.6237551388126072, 3),
    (-400.463564708571393, 900.11433486007741, 0.6130632097593779, 1),
    (-000.31734303667382744, -000.8566765685484413, -300.635540005334869, 3),
    (-300.363924457233523, 000.932188477864258, -700.727542752496833, 4),
    (-000.4880019721582438, 005.525777814640062, 900.78685344223237, 1),
    (100.5404235826697804, -900.472062762932722, 900.31117886871174, 4),
    (100.5857009600197442, -000.9537136892253171, -000.9849268821909802, 1),
    (300.964501056143068, 000.1399260178037435, 800.286915348177043, 1),
    (-200.740254648693703, -400.777510556412001, 300.0836892217625477, 3),
    (800.062943558635965, -200.1855325082372117, 40.402721152205865, 1),
    (-40.718380848013047, 50.349415630883288, -90.96019324855868, 2),
    (10.6254213077595363, -30.290077192286905, 30.9584263176037984, 4),
    (10.1966432538419974, -00.6363321700115304, -30.9363542295087216, 1),
    (90.626609986238394, 50.177127046729044, 900.308122772055545, 1),
    (30.3938627562898116, -70.802132548763364, 200.262390635264878, 4),
    (-10.556097275735727, 50.852029896070571, -10.829894546184127, 2),
    (-40.825316481314104, 90.573211400919153, 10.4250778626796756, 1),
    (00.8910071275786316, 40.646377722794785, 500.212890185945872, 1),
    predicted_point[0],
    predicted_point[0] # fill last spot because errors
] # test points

point_relations_3d = [0] * (len(points_3d)+1)

x_values_base_map = np.zeros((len(points_3d), 1, 4))

higher = points_3d
lower = points_3d # higher and lower points

ori_points_3d = points_3d # save unrotated

max_z = find_max_value(ori_points_3d[:3], 2)
min_z = find_min_value(ori_points_3d[:3], 2)
max_y = find_max_value(ori_points_3d[:3], 1)
min_y = find_min_value(ori_points_3d[:3], 1)
max_x = find_max_value(ori_points_3d[:3], 0)
min_x = find_min_value(ori_points_3d[:3], 0)

max_i = find_max_value(ori_points_3d[:3], 3)
min_i = find_min_value(ori_points_3d[:3], 3)
try:
    step_i = 255/(max_i + abs(min_i))
except:
    step_i = 255

try:
    step_x = 255/(max_x + abs(min_x))
except:
    stpe_x = 255

try:
    step_y = 255/(max_y + abs(min_y))
except:
    step_y = 255

try:
    step_z = 255/(max_z + abs(min_z))
except:
    step_z = 255 # global data info. change later

abs_z = min_z
if(max_z > min_z):
    abs_z = max_z